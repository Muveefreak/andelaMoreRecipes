"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function () {
  var a = {},
      b = function b(_b) {
    for (var c = a[_b], e = c.deps, f = c.defn, g = e.length, h = new Array(g), i = 0; i < g; ++i) {
      h[i] = d(e[i]);
    }var j = f.apply(null, h);if (void 0 === j) throw "module [" + _b + "] returned undefined";c.instance = j;
  },
      c = function c(b, _c, d) {
    if ("string" != typeof b) throw "module id must be a string";if (void 0 === _c) throw "no dependencies for " + b;if (void 0 === d) throw "no definition function for " + b;a[b] = { deps: _c, defn: d, instance: void 0 };
  },
      d = function d(c) {
    var d = a[c];if (void 0 === d) throw "module [" + c + "] was undefined";return void 0 === d.instance && b(c), d.instance;
  },
      e = function e(a, b) {
    for (var c = a.length, e = new Array(c), f = 0; f < c; ++f) {
      e.push(d(a[f]));
    }b.apply(null, b);
  },
      f = {};f.bolt = { module: { api: { define: c, require: e, demand: d } } };var g = c,
      h = function h(a, b) {
    g(a, [], function () {
      return b;
    });
  };h("d", tinymce.util.Tools.resolve), g("1", ["d"], function (a) {
    return a("tinymce.ThemeManager");
  }), g("2", ["d"], function (a) {
    return a("tinymce.ui.Api");
  }), g("3", ["d"], function (a) {
    return a("tinymce.util.Delay");
  }), g("4", [], function () {
    var a = function a(b) {
      return b.reduce(function (b, c) {
        return Array.isArray(c) ? b.concat(a(c)) : b.concat(c);
      }, []);
    };return { flatten: a };
  }), g("e", [], function () {
    var a = function a(_a) {
      return function (b) {
        return (typeof b === "undefined" ? "undefined" : _typeof(b)) === _a;
      };
    },
        b = function b(a) {
      return Array.isArray(a);
    },
        c = function c(a) {
      return null === a;
    },
        d = function d(a) {
      return function (d) {
        return !c(d) && !b(d) && a(d);
      };
    };return { isString: a("string"), isNumber: a("number"), isBoolean: a("boolean"), isFunction: a("function"), isObject: d(a("object")), isNull: c, isArray: b };
  }), g("5", ["e"], function (a) {
    var b = function b(a, _b2) {
      if (_b2(a)) return !0;throw new Error("Default value doesn't match requested type.");
    },
        c = function c(a) {
      return function (c, d, e) {
        var f = c.settings;return b(e, a), d in f && a(f[d]) ? f[d] : e;
      };
    },
        d = function d(a, b) {
      return a.split(b).filter(function (a) {
        return a.length > 0;
      });
    },
        e = function e(b, c) {
      var e = function e(a) {
        return "string" == typeof a ? d(a, /[ ,]/) : a;
      },
          f = function f(a, b) {
        return a === !1 ? [] : b;
      };return a.isArray(b) ? b : a.isString(b) ? e(b) : a.isBoolean(b) ? f(b, c) : c;
    },
        f = function f(a) {
      return function (c, d, f) {
        var g = d in c.settings ? c.settings[d] : f;return b(f, a), e(g, f);
      };
    };return { getStringOr: c(a.isString), getBoolOr: c(a.isBoolean), getNumberOr: c(a.isNumber), getHandlerOr: c(a.isFunction), getToolbarItemsOr: f(a.isArray) };
  }), g("7", [], function () {
    var a = function a(_a2, b) {
      return { id: _a2, rect: b };
    },
        b = function b(a, _b3) {
      for (var c = 0; c < _b3.length; c++) {
        var d = _b3[c],
            e = d(a);if (e) return e;
      }return null;
    };return { match: b, result: a };
  }), g("i", ["d"], function (a) {
    return a("tinymce.dom.DOMUtils");
  }), g("q", [], function () {
    var a = function a(_a3) {
      return { x: _a3.left, y: _a3.top, w: _a3.width, h: _a3.height };
    },
        b = function b(a) {
      return { left: a.x, top: a.y, width: a.w, height: a.h, right: a.x + a.w, bottom: a.y + a.h };
    };return { fromClientRect: a, toClientRect: b };
  }), g("f", ["i", "q"], function (a, b) {
    var c = function c(b) {
      var c = a.DOM.getViewPort();return { x: b.x + c.x, y: b.y + c.y, w: b.w, h: b.h };
    },
        d = function d(a) {
      var b = a.getBoundingClientRect();return c({ x: b.left, y: b.top, w: Math.max(a.clientWidth, a.offsetWidth), h: Math.max(a.clientHeight, a.offsetHeight) });
    },
        e = function e(a, b) {
      return d(b);
    },
        f = function f(a) {
      return d(a.getElement().ownerDocument.body);
    },
        g = function g(a) {
      return d(a.getContentAreaContainer() || a.getBody());
    },
        h = function h(a) {
      var d = a.selection.getBoundingClientRect();return d ? c(b.fromClientRect(d)) : null;
    };return { getElementRect: e, getPageAreaRect: f, getContentAreaRect: g, getSelectionRect: h };
  }), g("6", ["7", "f"], function (a, b) {
    var c = function c(_c2, d) {
      return function (e) {
        for (var f = 0; f < d.length; f++) {
          if (d[f].predicate(_c2)) return a.result(d[f].id, b.getElementRect(e, _c2));
        }return null;
      };
    },
        d = function d(c, _d) {
      return function (e) {
        for (var f = 0; f < c.length; f++) {
          for (var g = 0; g < _d.length; g++) {
            if (_d[g].predicate(c[f])) return a.result(_d[g].id, b.getElementRect(e, c[f]));
          }
        }return null;
      };
    };return { element: c, parent: d };
  }), g("g", ["d"], function (a) {
    return a("tinymce.util.Tools");
  }), g("8", ["g"], function (a) {
    var b = function b(a, _b4) {
      return { id: a, predicate: _b4 };
    },
        c = function c(_c3) {
      return a.map(_c3, function (a) {
        return b(a.id, a.predicate);
      });
    };return { create: b, fromContextToolbars: c };
  }), g("9", ["7", "f"], function (a, b) {
    var c = function c(_c4) {
      return function (d) {
        return d.selection.isCollapsed() ? null : a.result(_c4, b.getSelectionRect(d));
      };
    },
        d = function d(c, _d2) {
      return function (e) {
        var f,
            g = e.schema.getTextBlockElements();for (f = 0; f < c.length; f++) {
          if ("TABLE" === c[f].nodeName) return null;
        }for (f = 0; f < c.length; f++) {
          if (c[f].nodeName in g) return e.dom.isEmpty(c[f]) ? a.result(_d2, b.getSelectionRect(e)) : null;
        }return null;
      };
    };return { textSelection: c, emptyTextBlock: d };
  }), g("h", ["d"], function (a) {
    return a("tinymce.EditorManager");
  }), g("a", ["h", "i"], function (a, b) {
    var c = function c(a, b) {
      var c = function c() {
        a._skinLoaded = !0, a.fire("SkinLoaded"), b();
      };a.initialized ? c() : a.on("init", c);
    },
        d = function d(b) {
      var c = a.baseURL + "/skins/";return b ? c + b : c + "lightgray";
    },
        e = function e(a, b) {
      return a.documentBaseURI.toAbsolute(b);
    },
        f = function f(a, _f) {
      var g = a.settings,
          h = g.skin_url ? e(a, g.skin_url) : d(g.skin),
          i = function i() {
        c(a, _f);
      };b.DOM.styleSheetLoader.load(h + "/skin.min.css", i), a.contentCSS.push(h + "/content.inline.min.css");
    };return { load: f };
  }), g("j", ["d"], function (a) {
    return a("tinymce.ui.Factory");
  }), g("k", ["g", "j", "e"], function (a, b, c) {
    var d = function d(a, b) {
      var c = function c(a, b) {
        return { selector: a, handler: b };
      },
          d = function d(a) {
        b.active(a);
      },
          e = function e(a) {
        b.disabled(a);
      };return b.settings.stateSelector ? c(b.settings.stateSelector, d) : b.settings.disabledStateSelector ? c(b.settings.disabledStateSelector, e) : null;
    },
        e = function e(a, b, c) {
      return function () {
        var e = d(b, c);null !== e && a.selection.selectorChanged(e.selector, e.handler);
      };
    },
        f = function f(a) {
      return c.isArray(a) ? a : c.isString(a) ? a.split(/[ ,]/) : [];
    },
        g = function g(c, d, _g) {
      var h,
          i = [];if (_g) return a.each(f(_g), function (a) {
        var d;"|" == a ? h = null : c.buttons[a] && (h || (h = { type: "buttongroup", items: [] }, i.push(h)), d = a, a = c.buttons[d], "function" == typeof a && (a = a()), a.type = a.type || "button", a = b.create(a), a.on("postRender", e(c, d, a)), h.items.push(a));
      }), b.create({ type: "toolbar", layout: "flow", name: d, items: i });
    };return { create: g };
  }), g("r", ["d"], function (a) {
    return a("tinymce.util.Promise");
  }), g("s", [], function () {
    var a = 0,
        b = function b() {
      var a = function a() {
        return Math.round(4294967295 * Math.random()).toString(36);
      };return "s" + Date.now().toString(36) + a() + a() + a();
    },
        c = function c(_c5) {
      return _c5 + a++ + b();
    };return { uuid: c };
  }), g("w", [], function () {
    var a = function a(_a4, b) {
      function c(c) {
        var e, f, g;f = b[c ? "startContainer" : "endContainer"], g = b[c ? "startOffset" : "endOffset"], 1 == f.nodeType && (e = _a4.create("span", { "data-mce-type": "bookmark" }), f.hasChildNodes() ? (g = Math.min(g, f.childNodes.length - 1), c ? f.insertBefore(e, f.childNodes[g]) : _a4.insertAfter(e, f.childNodes[g])) : f.appendChild(e), f = e, g = 0), d[c ? "startContainer" : "endContainer"] = f, d[c ? "startOffset" : "endOffset"] = g;
      }var d = {};return c(!0), b.collapsed || c(), d;
    },
        b = function b(a, _b5) {
      function c(c) {
        function d(a) {
          for (var b = a.parentNode.firstChild, c = 0; b;) {
            if (b == a) return c;1 == b.nodeType && "bookmark" == b.getAttribute("data-mce-type") || c++, b = b.nextSibling;
          }return -1;
        }var e, f, g;e = g = _b5[c ? "startContainer" : "endContainer"], f = _b5[c ? "startOffset" : "endOffset"], e && (1 == e.nodeType && (f = d(e), e = e.parentNode, a.remove(g)), _b5[c ? "startContainer" : "endContainer"] = e, _b5[c ? "startOffset" : "endOffset"] = f);
      }c(!0), c();var d = a.createRng();return d.setStart(_b5.startContainer, _b5.startOffset), _b5.endContainer && d.setEnd(_b5.endContainer, _b5.endOffset), d;
    };return { create: a, resolve: b };
  }), g("x", ["d"], function (a) {
    return a("tinymce.dom.TreeWalker");
  }), g("y", ["d"], function (a) {
    return a("tinymce.dom.RangeUtils");
  }), g("t", ["w", "g", "x", "y"], function (a, b, c, d) {
    var e = function e(a, b, d) {
      var e,
          f,
          g = [];for (e = new c(b, a), f = b; f && (1 === f.nodeType && g.push(f), f !== d); f = e.next()) {}return g;
    },
        f = function f(c, d) {
      var e, f, g;f = c.dom, g = c.selection, e = a.create(f, g.getRng()), b.each(d, function (a) {
        c.dom.remove(a, !0);
      }), g.setRng(a.resolve(f, e));
    },
        g = function g(a) {
      return "A" === a.nodeName && a.hasAttribute("href");
    },
        h = function h(a, b) {
      var c = a.getParent(b, g);return c ? c : b;
    },
        i = function i(a) {
      var c, f, i, j, k, l, m;return k = a.selection, l = a.dom, m = k.getRng(), c = h(l, d.getNode(m.startContainer, m.startOffset)), f = d.getNode(m.endContainer, m.endOffset), i = a.getBody(), j = b.grep(e(i, c, f), g);
    },
        j = function j(a) {
      f(a, i(a));
    };return { unlinkSelection: j };
  }), g("p", ["s", "t"], function (a, b) {
    var c = function c(a, b) {
      var c, d, e;for (e = '<table data-mce-id="mce" style="width: 100%">', e += "<tbody>", d = 0; d < b; d++) {
        for (e += "<tr>", c = 0; c < a; c++) {
          e += "<td><br></td>";
        }e += "</tr>";
      }return e += "</tbody>", e += "</table>";
    },
        d = function d(a) {
      var b = a.dom.select("*[data-mce-id]");return b[0];
    },
        e = function e(a, b, _e) {
      a.undoManager.transact(function () {
        var f, g;a.insertContent(c(b, _e)), f = d(a), f.removeAttribute("data-mce-id"), g = a.dom.select("td,th", f), a.selection.setCursorLocation(g[0], 0);
      });
    },
        f = function f(a, b) {
      a.execCommand("FormatBlock", !1, b);
    },
        g = function g(b, c, d) {
      var e, f;e = b.editorUpload.blobCache, f = e.create(a.uuid("mceu"), d, c), e.add(f), b.insertContent(b.dom.createHTML("img", { src: f.blobUri() }));
    },
        h = function h(a) {
      a.selection.collapse(!1);
    },
        i = function i(a) {
      a.focus(), b.unlinkSelection(a), h(a);
    },
        j = function j(a, b, c) {
      a.focus(), a.dom.setAttrib(b, "href", c), h(a);
    },
        k = function k(a, b) {
      a.execCommand("mceInsertLink", !1, { href: b }), h(a);
    },
        l = function l(a, b) {
      var c = a.dom.getParent(a.selection.getStart(), "a[href]");c ? j(a, c, b) : k(a, b);
    },
        m = function m(a, b) {
      0 === b.trim().length ? i(a) : l(a, b);
    };return { insertTable: e, formatBlock: f, insertBlob: g, createLink: m, unlink: i };
  }), g("u", [], function () {
    var a = function a(_a5) {
      return (/^www\.|\.(com|org|edu|gov|uk|net|ca|de|jp|fr|au|us|ru|ch|it|nl|se|no|es|mil)$/i.test(_a5.trim())
      );
    },
        b = function b(a) {
      return (/^https?:\/\//.test(a.trim())
      );
    };return { isDomainLike: a, isAbsolute: b };
  }), g("l", ["g", "j", "r", "p", "u"], function (a, b, c, d, e) {
    var f = function f(a) {
      a.find("textbox").eq(0).each(function (a) {
        a.focus();
      });
    },
        g = function g(c, d) {
      var e = b.create(a.extend({ type: "form", layout: "flex", direction: "row", padding: 5, name: c, spacing: 3 }, d));return e.on("show", function () {
        f(e);
      }), e;
    },
        h = function h(a, b) {
      return b ? a.show() : a.hide();
    },
        i = function i(a, b) {
      return new c(function (c) {
        a.windowManager.confirm("The URL you entered seems to be an external link. Do you want to add the required http:// prefix?", function (a) {
          var d = a === !0 ? "http://" + b : b;c(d);
        });
      });
    },
        j = function j(a, b) {
      return !e.isAbsolute(b) && e.isDomainLike(b) ? i(a, b) : c.resolve(b);
    },
        k = function k(a, b) {
      var c = {},
          e = function e() {
        a.focus(), d.unlink(a), b();
      },
          f = function f(a) {
        var b = a.meta;b && b.attach && (c = { href: this.value(), attach: b.attach });
      },
          i = function i(b) {
        if (b.control === this) {
          var c,
              d = "";c = a.dom.getParent(a.selection.getStart(), "a[href]"), c && (d = a.dom.getAttrib(c, "href")), this.fromJSON({ linkurl: d }), h(this.find("#unlink"), c), this.find("#linkurl")[0].focus();
        }
      };return g("quicklink", { items: [{ type: "button", name: "unlink", icon: "unlink", onclick: e, tooltip: "Remove link" }, { type: "filepicker", name: "linkurl", placeholder: "Paste or type a link", filetype: "file", onchange: f }, { type: "button", icon: "checkmark", subtype: "primary", tooltip: "Ok", onclick: "submit" }], onshow: i, onsubmit: function onsubmit(e) {
          j(a, e.data.linkurl).then(function (e) {
            a.undoManager.transact(function () {
              e === c.href && (c.attach(), c = {}), d.createLink(a, e);
            }), b();
          });
        } });
    };return { createQuickLinkForm: k };
  }), g("v", ["d"], function (a) {
    return a("tinymce.geom.Rect");
  }), g("m", ["v", "q"], function (a, b) {
    var c = function c(a, b) {
      return { rect: a, position: b };
    },
        d = function d(a, b) {
      return { x: b.x, y: b.y, w: a.w, h: a.h };
    },
        e = function e(b, _e2, f, g, h) {
      var i,
          j,
          k,
          l = { x: g.x, y: g.y, w: g.w + (g.w < h.w + f.w ? h.w : 0), h: g.h + (g.h < h.h + f.h ? h.h : 0) };return i = a.findBestRelativePosition(h, f, l, b), f = a.clamp(f, l), i ? (j = a.relativePosition(h, f, i), k = d(h, j), c(k, i)) : (f = a.intersect(l, f), f ? (i = a.findBestRelativePosition(h, f, l, _e2)) ? (j = a.relativePosition(h, f, i), k = d(h, j), c(k, i)) : (k = d(h, f), c(k, i)) : null);
    },
        f = function f(a, b, c) {
      return e(["cr-cl", "cl-cr"], ["bc-tc", "bl-tl", "br-tr"], a, b, c);
    },
        g = function g(a, b, c) {
      return e(["tc-bc", "bc-tc", "tl-bl", "bl-tl", "tr-br", "br-tr", "cr-cl", "cl-cr"], ["bc-tc", "bl-tl", "br-tr", "cr-cl"], a, b, c);
    },
        h = function h(a, c, d, e) {
      var f;return "function" == typeof a ? (f = a({ elementRect: b.toClientRect(c), contentAreaRect: b.toClientRect(d), panelRect: b.toClientRect(e) }), b.fromClientRect(f)) : e;
    },
        i = function i(a) {
      return a.panelRect;
    };return { calcInsert: f, calc: g, userConstrain: h, defaultHandler: i };
  }), g("c", ["g", "j", "i", "k", "l", "f", "m", "5"], function (a, b, c, d, e, f, g, h) {
    return function () {
      var i,
          j,
          k = ["bold", "italic", "|", "quicklink", "h2", "h3", "blockquote"],
          l = ["quickimage", "quicktable"],
          m = function m(b, c) {
        return a.map(c, function (a) {
          return d.create(b, a.id, a.items);
        });
      },
          n = function n(a) {
        return h.getToolbarItemsOr(a, "selection_toolbar", k);
      },
          o = function o(a) {
        return h.getToolbarItemsOr(a, "insert_toolbar", l);
      },
          p = function p(a) {
        return a.items().length > 0;
      },
          q = function q(c, f) {
        var g = m(c, f).concat([d.create(c, "text", n(c)), d.create(c, "insert", o(c)), e.createQuickLinkForm(c, B)]);return b.create({ type: "floatpanel", role: "dialog", classes: "tinymce tinymce-inline arrow", ariaLabel: "Inline toolbar", layout: "flex", direction: "column", align: "stretch", autohide: !1, autofix: !0, fixed: !0, border: 1, items: a.grep(g, p), oncancel: function oncancel() {
            c.focus();
          } });
      },
          r = function r(a) {
        a && a.show();
      },
          s = function s(a, b) {
        a.moveTo(b.x, b.y);
      },
          t = function t(b, c) {
        c = c ? c.substr(0, 2) : "", a.each({ t: "down", b: "up", c: "center" }, function (a, d) {
          b.classes.toggle("arrow-" + a, d === c.substr(0, 1));
        }), "cr" === c ? (b.classes.toggle("arrow-left", !0), b.classes.toggle("arrow-right", !1)) : "cl" === c ? (b.classes.toggle("arrow-left", !0), b.classes.toggle("arrow-right", !0)) : a.each({ l: "left", r: "right" }, function (a, d) {
          b.classes.toggle("arrow-" + a, d === c.substr(1, 1));
        });
      },
          u = function u(a, b) {
        var c = a.items().filter("#" + b);return c.length > 0 && (c[0].show(), a.reflow(), !0);
      },
          v = function v(a, b, d, e) {
        var i, k, l, m;return m = h.getHandlerOr(d, "inline_toolbar_position_handler", g.defaultHandler), i = f.getContentAreaRect(d), k = c.DOM.getRect(a.getEl()), l = "insert" === b ? g.calcInsert(e, i, k) : g.calc(e, i, k), !!l && (k = l.rect, j = e, s(a, g.userConstrain(m, e, i, k)), t(a, l.position), !0);
      },
          w = function w(a, b, c, d) {
        return r(a), a.items().hide(), u(a, b) ? void (v(a, b, c, d) === !1 && B(a)) : void B(a);
      },
          x = function x() {
        return i.items().filter("form:visible").length > 0;
      },
          y = function y(a, b) {
        if (i) {
          if (i.items().hide(), !u(i, b)) return void B(i);var d, e, k, l;r(i), i.items().hide(), u(i, b), l = h.getHandlerOr(a, "inline_toolbar_position_handler", g.defaultHandler), d = f.getContentAreaRect(a), e = c.DOM.getRect(i.getEl()), k = g.calc(j, d, e), k && (e = k.rect, s(i, g.userConstrain(l, j, d, e)), t(i, k.position));
        }
      },
          z = function z(a, b, c, d) {
        i || (i = q(a, d), i.renderTo(document.body).reflow().moveTo(c.x, c.y), a.nodeChanged()), w(i, b, a, c);
      },
          A = function A(a, b, c) {
        i && v(i, b, a, c);
      },
          B = function B() {
        i && i.hide();
      },
          C = function C() {
        i && i.find("toolbar:visible").eq(0).each(function (a) {
          a.focus(!0);
        });
      },
          D = function D() {
        i && (i.remove(), i = null);
      },
          E = function E() {
        return i && i.visible() && x();
      };return { show: z, showForm: y, reposition: A, inForm: E, hide: B, focus: C, remove: D };
    };
  }), g("n", ["r"], function (a) {
    var b = function b(_b6) {
      return new a(function (a) {
        var c = new FileReader();c.onloadend = function () {
          a(c.result.split(",")[1]);
        }, c.readAsDataURL(_b6);
      });
    };return { blobToBase64: b };
  }), g("o", ["r"], function (a) {
    var b = function b() {
      return new a(function (a) {
        var b;b = document.createElement("input"), b.type = "file", b.style.position = "fixed", b.style.left = 0, b.style.top = 0, b.style.opacity = .001, document.body.appendChild(b), b.onchange = function (b) {
          a(Array.prototype.slice.call(b.target.files));
        }, b.click(), b.parentNode.removeChild(b);
      });
    };return { pickFile: b };
  }), g("b", ["c", "n", "o", "p"], function (a, b, c, d) {
    var e = function e(a) {
      for (var b = function b(_b7) {
        return function () {
          d.formatBlock(a, _b7);
        };
      }, c = 1; c < 6; c++) {
        var e = "h" + c;a.addButton(e, { text: e.toUpperCase(), tooltip: "Heading " + c, stateSelector: e, onclick: b(e), onPostRender: function onPostRender() {
            var a = this.getEl().firstChild.firstChild;a.style.fontWeight = "bold";
          } });
      }
    },
        f = function f(a, _f2) {
      a.addButton("quicklink", { icon: "link", tooltip: "Insert/Edit link", stateSelector: "a[href]", onclick: function onclick() {
          _f2.showForm(a, "quicklink");
        } }), a.addButton("quickimage", { icon: "image", tooltip: "Insert image", onclick: function onclick() {
          c.pickFile().then(function (c) {
            var e = c[0];b.blobToBase64(e).then(function (b) {
              d.insertBlob(a, b, e);
            });
          });
        } }), a.addButton("quicktable", { icon: "table", tooltip: "Insert table", onclick: function onclick() {
          _f2.hide(), d.insertTable(a, 2, 2);
        } }), e(a);
    };return { addToEditor: f };
  }), g("0", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c"], function (a, b, c, d, e, f, g, h, i, j, k, l) {
    var m = function m(a) {
      var b = a.selection.getNode(),
          c = a.dom.getParents(b);return c;
    },
        n = function n(a, b, c, d) {
      var e = function e(c) {
        return a.dom.is(c, b);
      };return { predicate: e, id: c, items: d };
    },
        o = function o(a) {
      var b = a.contextToolbars;return d.flatten([b ? b : [], n(a, "img", "image", "alignleft aligncenter alignright")]);
    },
        p = function p(a, b) {
      var c, d, e;return d = m(a), e = h.fromContextToolbars(b), c = g.match(a, [f.element(d[0], e), i.textSelection("text"), i.emptyTextBlock(d, "insert"), f.parent(d, e)]), c && c.rect ? c : null;
    },
        q = function q(a, b) {
      var c = function c() {
        var c = o(a),
            d = p(a, c);d ? b.show(a, d.id, d.rect, c) : b.hide();
      };return function () {
        a.removed || c();
      };
    },
        r = function r(a, b) {
      return function () {
        var c = o(a),
            d = p(a, c);d && b.reposition(a, d.id, d.rect);
      };
    },
        s = function s(a, b, c) {
      return function () {
        a.removed || b.inForm() || c();
      };
    },
        t = function t(a, b) {
      var d = c.throttle(q(a, b), 0),
          e = c.throttle(s(a, b, q(a, b)), 0);a.on("blur hide ObjectResizeStart", b.hide), a.on("click", d), a.on("nodeChange mouseup", e), a.on("ResizeEditor keyup", d), a.on("ResizeWindow", r(a, b)), a.on("remove", b.remove), a.shortcuts.add("Alt+F10", "", b.focus);
    },
        u = function u(a, b) {
      a.shortcuts.remove("meta+k"), a.shortcuts.add("meta+k", "", function () {
        var c = o(a),
            d = d = g.match(a, [i.textSelection("quicklink")]);d && b.show(a, d.id, d.rect, c);
      });
    },
        v = function v(a, b) {
      return j.load(a, function () {
        t(a, b), u(a, b);
      }), {};
    },
        w = function w(a) {
      throw new Error(a);
    };return a.add("inlite", function (a) {
      var b = new l();k.addToEditor(a, b);var c = function c() {
        return a.inline ? v(a, b) : w("inlite theme only supports inline mode.");
      };return { renderUI: c };
    }), b.appendTo(window.tinymce ? window.tinymce : {}), function () {};
  }), d("0")();
}();